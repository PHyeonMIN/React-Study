{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://react-http-f8b8f-default-rtdb.firebaseio.com/cart.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Could not fetch cart data!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart(cartData));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching cart data successfully!\"\n      }));\n    }\n  };\n}; // 작업 크리에이터 - 리덕스 툴킷은 이러한 리듀서 메소드에 대해 작업 크리에이터를 자동으로 생성\n\nexport const sendCartData = cart => {\n  // 자동으로 디스패치 인수를 줌\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending cart data!\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-http-f8b8f-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Sending cart data failed.\");\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sent cart data successfully!\"\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/yeoboya/git/react_study/EX_13/src/store/cart-actions.js"],"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify","items","totalQuantity"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,SAAO,MAAOC,QAAP,IAAoB;AAEzB,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,aAAOD,IAAP;AACD,KAXD;;AAaA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMP,SAAS,EAAhC;AACAD,MAAAA,QAAQ,CAACF,WAAW,CAACW,WAAZ,CAAwBD,QAAxB,CAAD,CAAR;AACD,KAHD,CAGE,OAAOE,KAAP,EAAc;AACdV,MAAAA,QAAQ,CACNH,SAAS,CAACc,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GA3BD;AA4BD,CA7BM,C,CA+BP;;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AACpC;AACA,SAAO,MAAOhB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CACNH,SAAS,CAACc,gBAAV,CAA2B;AACzBC,MAAAA,MAAM,EAAE,SADiB;AAEzBC,MAAAA,KAAK,EAAE,YAFkB;AAGzBC,MAAAA,OAAO,EAAE;AAHgB,KAA3B,CADM,CAAR;;AAOA,UAAMG,WAAW,GAAG,YAAY;AAC9B,YAAMf,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,EAE1B;AACEe,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,UAAAA,KAAK,EAACN,IAAI,CAACM,KAAZ;AAAmBC,UAAAA,aAAa,EAAGP,IAAI,CAACO;AAAxC,SAAf;AAFR,OAF0B,CAA5B;;AAQA,UAAI,CAACrB,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,KAZD;;AAcA,QAAI;AACF,YAAMY,WAAW,EAAjB;AAEAjB,MAAAA,QAAQ,CACNH,SAAS,CAACc,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,UAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD,KAVD,CAUE,OAAOJ,KAAP,EAAc;AACdV,MAAAA,QAAQ,CACNH,SAAS,CAACc,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,QAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADM,CAAR;AAOD;AACF,GAzCD;AA0CD,CA5CM","sourcesContent":["import { uiActions } from \"./ui-slice\";\r\nimport { cartActions } from \"./cart-slice\";\r\n\r\nexport const fetchCartData = () => {\r\n  return async (dispatch) => {\r\n\r\n    const fetchData = async () => {\r\n      const response = await fetch(\r\n        \"https://react-http-f8b8f-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Could not fetch cart data!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    };\r\n\r\n    try {\r\n      const cartData = await fetchData();\r\n      dispatch(cartActions.replaceCart(cartData));\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Fetching cart data successfully!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\n// 작업 크리에이터 - 리덕스 툴킷은 이러한 리듀서 메소드에 대해 작업 크리에이터를 자동으로 생성\r\nexport const sendCartData = (cart) => {\r\n  // 자동으로 디스패치 인수를 줌\r\n  return async (dispatch) => {\r\n    dispatch(\r\n      uiActions.showNotification({\r\n        status: \"pending\",\r\n        title: \"Sending...\",\r\n        message: \"Sending cart data!\",\r\n      })\r\n    );\r\n    const sendRequest = async () => {\r\n      const response = await fetch(\r\n        \"https://react-http-f8b8f-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({items:cart.items, totalQuantity : cart.totalQuantity}),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Sending cart data failed.\");\r\n      }\r\n    };\r\n\r\n    try {\r\n      await sendRequest();\r\n\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success!\",\r\n          message: \"Sent cart data successfully!\",\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        uiActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error!\",\r\n          message: \"Sent cart data successfully!\",\r\n        })\r\n      );\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}