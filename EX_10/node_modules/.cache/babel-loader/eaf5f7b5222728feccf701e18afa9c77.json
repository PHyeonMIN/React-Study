{"ast":null,"code":"import { useCallback, useState } from \"react\";\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  }, [applyData]);\n  return {\n    isLoading,\n    error,\n    sendRequest // sendRequest:sendRequest 와 같음 - 모던 자바스크립트\n\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/yeoboya/git/react_study/EX_10/src/hooks/use-http.js"],"names":["useCallback","useState","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMM,WAAW,GAAGP,WAAW,CAAE,OAAOQ,aAAP,EAAqBC,SAArB,KAAmC;AAClEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AACD,KAbD,CAaE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GApB8B,EAoB7B,CAACK,SAAD,CApB6B,CAA/B;AAsBA,SAAO;AACHN,IAAAA,SADG;AAEHE,IAAAA,KAFG;AAGHE,IAAAA,WAHG,CAGe;;AAHf,GAAP;AAKD,CA/BD;;AAiCA,eAAeL,OAAf","sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = useCallback( async (requestConfig,applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : 'GET',\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  },[applyData]);\r\n\r\n  return {\r\n      isLoading,\r\n      error,\r\n      sendRequest       // sendRequest:sendRequest 와 같음 - 모던 자바스크립트\r\n  };\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}